# Multi-stage Docker build for lambda-nat-proxy
# This ensures reproducible builds with all dependencies included

# Stage 1: Node.js environment for dashboard build
FROM node:18-alpine AS dashboard-builder

# Set working directory
WORKDIR /app

# Copy package files
COPY web/package*.json ./web/
WORKDIR /app/web

# Install dependencies and build dashboard
RUN npm ci --only=production
COPY web/ .
RUN npm run build

# Stage 2: Go environment for binary build
FROM golang:1.21-alpine AS go-builder

# Build arguments for target platform
ARG TARGETOS=linux
ARG TARGETARCH=amd64

# Install build dependencies
RUN apk add --no-cache git

# Set working directory
WORKDIR /app

# Copy source code first 
COPY . .

# Copy built dashboard from previous stage
COPY --from=dashboard-builder /app/web/dist ./internal/dashboard/web/dist

# Fix the replace directive in lambda/go.mod to use absolute path
RUN sed -i 's|replace github.com/dan-v/lambda-nat-punch-proxy => ..|replace github.com/dan-v/lambda-nat-punch-proxy => /app|' lambda/go.mod

# Download dependencies
RUN go mod download
RUN cd lambda && go mod download

# Build Lambda function
RUN cd lambda && GOOS=linux GOARCH=amd64 go build -o ../cmd/lambda-nat-proxy/assets/bootstrap .

# Build main binary for target platform
RUN CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -a -installsuffix cgo -o lambda-nat-proxy ./cmd/lambda-nat-proxy

# Stage 3: Final minimal image (optional, for running)
FROM alpine:latest AS final

RUN apk --no-cache add ca-certificates
WORKDIR /root/

COPY --from=go-builder /app/lambda-nat-proxy .
COPY --from=go-builder /app/cmd/lambda-nat-proxy/assets/bootstrap ./assets/

CMD ["./lambda-nat-proxy"]